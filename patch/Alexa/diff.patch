diff --git a/SampleApp/include/SampleApp/SampleApplication.h b/SampleApp/include/SampleApp/SampleApplication.h
index 6e95c4502..7fe17d414 100644
--- a/SampleApp/include/SampleApp/SampleApplication.h
+++ b/SampleApp/include/SampleApp/SampleApplication.h
@@ -28,6 +28,8 @@
 #include "SampleApplicationReturnCodes.h"
 #include "UserInputManager.h"
 
+#include "PosixQueueManager.h"
+
 #ifdef KWD
 #include <KWD/AbstractKeywordDetector.h>
 #endif
@@ -227,6 +229,8 @@ private:
     /// The singleton map from @c playerId to @c ExternalMediaAdapter creation functions.
     static capabilityAgents::externalMediaPlayer::ExternalMediaPlayer::AdapterCreationMap m_adapterToCreateFuncMap;
 
+    std::shared_ptr<PosixQueueManager> m_posixQueueManager;
+    
 #ifdef KWD
     /// The Wakeword Detector which can wake up the client using audio input.
     std::unique_ptr<kwd::AbstractKeywordDetector> m_keywordDetector;
diff --git a/SampleApp/src/CMakeLists.txt b/SampleApp/src/CMakeLists.txt
index 44b8291e6..ec7255bce 100644
--- a/SampleApp/src/CMakeLists.txt
+++ b/SampleApp/src/CMakeLists.txt
@@ -10,7 +10,8 @@ list(APPEND SampleApp_SOURCES
     UserInputManager.cpp
     SampleApplication.cpp
     SampleEqualizerModeController.cpp
-    main.cpp)
+    main.cpp
+    PosixQueueManager.cpp)
 
 if (PORTAUDIO)
     list(APPEND SampleApp_SOURCES PortAudioMicrophoneWrapper.cpp)
diff --git a/SampleApp/src/SampleApplication.cpp b/SampleApp/src/SampleApplication.cpp
index 61439eea9..59a9c9384 100644
--- a/SampleApp/src/SampleApplication.cpp
+++ b/SampleApp/src/SampleApplication.cpp
@@ -235,6 +235,10 @@ SampleApplication::MediaPlayerRegistration::MediaPlayerRegistration(
 }
 
 SampleAppReturnCode SampleApplication::run() {
+
+    avsCommon::utils::threading::Executor executor;
+    executor.submit([this]() { m_posixQueueManager->run(); });
+
     return m_userInputManager->run();
 }
 
@@ -559,6 +563,8 @@ bool SampleApplication::initialize(
         return false;
     }
 
+ 
+        
     authDelegate->addAuthObserver(userInterfaceManager);
     m_capabilitiesDelegate->addCapabilitiesObserver(userInterfaceManager);
 
@@ -661,7 +667,6 @@ bool SampleApplication::initialize(
     client->addSpeakerManagerObserver(userInterfaceManager);
 
     client->addNotificationsObserver(userInterfaceManager);
-
     /*
      * Add GUI Renderer as an observer if display cards are supported.
      */
@@ -809,7 +814,10 @@ bool SampleApplication::initialize(
         ACSDK_CRITICAL(LX("Failed to create UserInputManager!"));
         return false;
     }
-
+    m_posixQueueManager = alexaClientSDK::sampleApp::PosixQueueManager::create(m_interactionManager);
+    client->addAlexaDialogStateObserver(m_posixQueueManager);
+ 
+        
     authDelegate->addAuthObserver(m_userInputManager);
     client->getRegistrationManager()->addObserver(m_userInputManager);
     m_capabilitiesDelegate->addCapabilitiesObserver(m_userInputManager);
diff --git a/SampleApp/src/UserInputManager.cpp b/SampleApp/src/UserInputManager.cpp
index 73aca2d1e..f8cf1a29f 100644
--- a/SampleApp/src/UserInputManager.cpp
+++ b/SampleApp/src/UserInputManager.cpp
@@ -20,7 +20,7 @@
 #include <AVSCommon/Utils/String/StringUtils.h>
 #include "SampleApp/UserInputManager.h"
 #include "SampleApp/ConsolePrinter.h"
-
+#include "unistd.h"
 namespace alexaClientSDK {
 namespace sampleApp {
 
@@ -275,7 +275,8 @@ SampleAppReturnCode UserInputManager::run() {
             }
 #endif
         } else {
-            m_interactionManager->errorValue();
+           //  m_interactionManager->errorValue();
+            usleep(500 * 1000);
         }
     }
     if (!userTriggeredLogout && m_restart) {
